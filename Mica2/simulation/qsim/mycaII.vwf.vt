// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/23/2014 20:23:28"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MycaII
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MycaII_vlg_sample_tst(
	DIRB,
	DIRI,
	ck,
	opc,
	x,
	sampler_tx
);
input [7:0] DIRB;
input [7:0] DIRI;
input  ck;
input [2:0] opc;
input  x;
output sampler_tx;

reg sample;
time current_time;
always @(DIRB or DIRI or ck or opc or x)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MycaII_vlg_check_tst (
	PC,
	clk,
	sampler_rx
);
input [7:0] PC;
input  clk;
input sampler_rx;

reg [7:0] PC_expected;
reg  clk_expected;

reg [7:0] PC_prev;
reg  clk_prev;

reg [7:0] PC_expected_prev;
reg  clk_expected_prev;

reg [7:0] last_PC_exp;
reg  last_clk_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	PC_prev = PC;
	clk_prev = clk;
end

// update expected /o prevs

always @(trigger)
begin
	PC_expected_prev = PC_expected;
	clk_expected_prev = clk_expected;
end



// expected clk
initial
begin
	clk_expected = 1'bX;
end 
// expected PC[ 7 ]
initial
begin
	PC_expected[7] = 1'bX;
end 
// expected PC[ 6 ]
initial
begin
	PC_expected[6] = 1'bX;
end 
// expected PC[ 5 ]
initial
begin
	PC_expected[5] = 1'bX;
end 
// expected PC[ 4 ]
initial
begin
	PC_expected[4] = 1'bX;
end 
// expected PC[ 3 ]
initial
begin
	PC_expected[3] = 1'bX;
end 
// expected PC[ 2 ]
initial
begin
	PC_expected[2] = 1'bX;
end 
// expected PC[ 1 ]
initial
begin
	PC_expected[1] = 1'bX;
end 
// expected PC[ 0 ]
initial
begin
	PC_expected[0] = 1'bX;
end 
// generate trigger
always @(PC_expected or PC or clk_expected or clk)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected PC = %b | expected clk = %b | ",PC_expected_prev,clk_expected_prev);
	$display("| real PC = %b | real clk = %b | ",PC_prev,clk_prev);
`endif
	if (
		( PC_expected_prev[0] !== 1'bx ) && ( PC_prev[0] !== PC_expected_prev[0] )
		&& ((PC_expected_prev[0] !== last_PC_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_PC_exp[0] = PC_expected_prev[0];
	end
	if (
		( PC_expected_prev[1] !== 1'bx ) && ( PC_prev[1] !== PC_expected_prev[1] )
		&& ((PC_expected_prev[1] !== last_PC_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_PC_exp[1] = PC_expected_prev[1];
	end
	if (
		( PC_expected_prev[2] !== 1'bx ) && ( PC_prev[2] !== PC_expected_prev[2] )
		&& ((PC_expected_prev[2] !== last_PC_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_PC_exp[2] = PC_expected_prev[2];
	end
	if (
		( PC_expected_prev[3] !== 1'bx ) && ( PC_prev[3] !== PC_expected_prev[3] )
		&& ((PC_expected_prev[3] !== last_PC_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_PC_exp[3] = PC_expected_prev[3];
	end
	if (
		( PC_expected_prev[4] !== 1'bx ) && ( PC_prev[4] !== PC_expected_prev[4] )
		&& ((PC_expected_prev[4] !== last_PC_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_PC_exp[4] = PC_expected_prev[4];
	end
	if (
		( PC_expected_prev[5] !== 1'bx ) && ( PC_prev[5] !== PC_expected_prev[5] )
		&& ((PC_expected_prev[5] !== last_PC_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_PC_exp[5] = PC_expected_prev[5];
	end
	if (
		( PC_expected_prev[6] !== 1'bx ) && ( PC_prev[6] !== PC_expected_prev[6] )
		&& ((PC_expected_prev[6] !== last_PC_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_PC_exp[6] = PC_expected_prev[6];
	end
	if (
		( PC_expected_prev[7] !== 1'bx ) && ( PC_prev[7] !== PC_expected_prev[7] )
		&& ((PC_expected_prev[7] !== last_PC_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_PC_exp[7] = PC_expected_prev[7];
	end
	if (
		( clk_expected_prev !== 1'bx ) && ( clk_prev !== clk_expected_prev )
		&& ((clk_expected_prev !== last_clk_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk_expected_prev);
		$display ("     Real value = %b", clk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_clk_exp = clk_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MycaII_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] DIRB;
reg [7:0] DIRI;
reg ck;
reg [2:0] opc;
reg x;
// wires                                               
wire [7:0] PC;
wire clk;

wire sampler;                             

// assign statements (if any)                          
MycaII i1 (
// port map - connection between master ports and signals/registers   
	.DIRB(DIRB),
	.DIRI(DIRI),
	.PC(PC),
	.ck(ck),
	.clk(clk),
	.opc(opc),
	.x(x)
);

// ck
always
begin
	ck = 1'b0;
	ck = #500 1'b1;
	#500;
end 

// x
initial
begin
	x = 1'b1;
	# 10000;
	repeat(49)
	begin
		x = 1'b0;
		x = #10000 1'b1;
		# 10000;
	end
	x = 1'b0;
end 
// opc[ 2 ]
initial
begin
	opc[2] = 1'b0;
	opc[2] = #400000 1'b1;
	opc[2] = #500000 1'b0;
end 
// opc[ 1 ]
initial
begin
	opc[1] = 1'b0;
	opc[1] = #200000 1'b1;
	opc[1] = #200000 1'b0;
	opc[1] = #200000 1'b1;
	opc[1] = #300000 1'b0;
end 
// opc[ 0 ]
initial
begin
	repeat(4)
	begin
		opc[0] = 1'b0;
		opc[0] = #100000 1'b1;
		# 100000;
	end
	opc[0] = 1'b0;
	opc[0] = #100000 1'b1;
end 
// DIRB[ 7 ]
initial
begin
	DIRB[7] = 1'b0;
	DIRB[7] = #60000 1'b1;
	DIRB[7] = #60000 1'b0;
	DIRB[7] = #40000 1'b1;
	DIRB[7] = #40000 1'b0;
	DIRB[7] = #80000 1'b1;
	DIRB[7] = #20000 1'b0;
	DIRB[7] = #20000 1'b1;
	DIRB[7] = #20000 1'b0;
	DIRB[7] = #40000 1'b1;
	DIRB[7] = #100000 1'b0;
	DIRB[7] = #20000 1'b1;
	DIRB[7] = #60000 1'b0;
	DIRB[7] = #20000 1'b1;
	DIRB[7] = #20000 1'b0;
	DIRB[7] = #40000 1'b1;
	DIRB[7] = #20000 1'b0;
	DIRB[7] = #40000 1'b1;
	DIRB[7] = #80000 1'b0;
	DIRB[7] = #20000 1'b1;
	DIRB[7] = #60000 1'b0;
	DIRB[7] = #40000 1'b1;
	DIRB[7] = #60000 1'b0;
	DIRB[7] = #20000 1'b1;
end 
// DIRB[ 6 ]
initial
begin
	DIRB[6] = 1'b0;
	DIRB[6] = #20000 1'b1;
	DIRB[6] = #20000 1'b0;
	DIRB[6] = #20000 1'b1;
	DIRB[6] = #60000 1'b0;
	DIRB[6] = #60000 1'b1;
	DIRB[6] = #20000 1'b0;
	DIRB[6] = #80000 1'b1;
	DIRB[6] = #20000 1'b0;
	DIRB[6] = #100000 1'b1;
	DIRB[6] = #20000 1'b0;
	DIRB[6] = #20000 1'b1;
	DIRB[6] = #20000 1'b0;
	DIRB[6] = #20000 1'b1;
	DIRB[6] = #40000 1'b0;
	DIRB[6] = #120000 1'b1;
	DIRB[6] = #40000 1'b0;
	DIRB[6] = #20000 1'b1;
	DIRB[6] = #60000 1'b0;
	DIRB[6] = #100000 1'b1;
	DIRB[6] = #40000 1'b0;
	DIRB[6] = #40000 1'b1;
	DIRB[6] = #20000 1'b0;
	DIRB[6] = #20000 1'b1;
end 
// DIRB[ 5 ]
initial
begin
	DIRB[5] = 1'b0;
	DIRB[5] = #20000 1'b1;
	DIRB[5] = #40000 1'b0;
	DIRB[5] = #20000 1'b1;
	DIRB[5] = #40000 1'b0;
	DIRB[5] = #40000 1'b1;
	DIRB[5] = #20000 1'b0;
	DIRB[5] = #20000 1'b1;
	DIRB[5] = #40000 1'b0;
	DIRB[5] = #60000 1'b1;
	DIRB[5] = #60000 1'b0;
	DIRB[5] = #100000 1'b1;
	DIRB[5] = #20000 1'b0;
	DIRB[5] = #20000 1'b1;
	DIRB[5] = #40000 1'b0;
	DIRB[5] = #40000 1'b1;
	DIRB[5] = #20000 1'b0;
	DIRB[5] = #60000 1'b1;
	DIRB[5] = #60000 1'b0;
	DIRB[5] = #20000 1'b1;
	DIRB[5] = #120000 1'b0;
	DIRB[5] = #20000 1'b1;
	DIRB[5] = #40000 1'b0;
	DIRB[5] = #40000 1'b1;
	DIRB[5] = #20000 1'b0;
end 
// DIRB[ 4 ]
initial
begin
	DIRB[4] = 1'b1;
	DIRB[4] = #20000 1'b0;
	DIRB[4] = #20000 1'b1;
	DIRB[4] = #20000 1'b0;
	DIRB[4] = #20000 1'b1;
	DIRB[4] = #20000 1'b0;
	DIRB[4] = #140000 1'b1;
	DIRB[4] = #20000 1'b0;
	DIRB[4] = #20000 1'b1;
	DIRB[4] = #80000 1'b0;
	DIRB[4] = #20000 1'b1;
	DIRB[4] = #100000 1'b0;
	DIRB[4] = #20000 1'b1;
	DIRB[4] = #20000 1'b0;
	DIRB[4] = #40000 1'b1;
	DIRB[4] = #20000 1'b0;
	DIRB[4] = #100000 1'b1;
	DIRB[4] = #60000 1'b0;
	DIRB[4] = #20000 1'b1;
	DIRB[4] = #20000 1'b0;
	DIRB[4] = #20000 1'b1;
	DIRB[4] = #40000 1'b0;
	DIRB[4] = #20000 1'b1;
	DIRB[4] = #20000 1'b0;
	DIRB[4] = #40000 1'b1;
	DIRB[4] = #20000 1'b0;
	DIRB[4] = #20000 1'b1;
end 
// DIRB[ 3 ]
initial
begin
	DIRB[3] = 1'b1;
	DIRB[3] = #20000 1'b0;
	DIRB[3] = #20000 1'b1;
	DIRB[3] = #20000 1'b0;
	DIRB[3] = #20000 1'b1;
	DIRB[3] = #40000 1'b0;
	DIRB[3] = #40000 1'b1;
	DIRB[3] = #20000 1'b0;
	DIRB[3] = #40000 1'b1;
	DIRB[3] = #60000 1'b0;
	DIRB[3] = #20000 1'b1;
	DIRB[3] = #20000 1'b0;
	DIRB[3] = #80000 1'b1;
	DIRB[3] = #80000 1'b0;
	DIRB[3] = #40000 1'b1;
	DIRB[3] = #20000 1'b0;
	DIRB[3] = #60000 1'b1;
	DIRB[3] = #20000 1'b0;
	DIRB[3] = #40000 1'b1;
	DIRB[3] = #40000 1'b0;
	DIRB[3] = #20000 1'b1;
	DIRB[3] = #40000 1'b0;
	DIRB[3] = #100000 1'b1;
	DIRB[3] = #40000 1'b0;
	DIRB[3] = #20000 1'b1;
end 
// DIRB[ 2 ]
initial
begin
	DIRB[2] = 1'b0;
	DIRB[2] = #20000 1'b1;
	DIRB[2] = #20000 1'b0;
	DIRB[2] = #20000 1'b1;
	DIRB[2] = #60000 1'b0;
	DIRB[2] = #40000 1'b1;
	DIRB[2] = #20000 1'b0;
	DIRB[2] = #40000 1'b1;
	DIRB[2] = #40000 1'b0;
	DIRB[2] = #20000 1'b1;
	DIRB[2] = #80000 1'b0;
	DIRB[2] = #40000 1'b1;
	DIRB[2] = #40000 1'b0;
	DIRB[2] = #20000 1'b1;
	DIRB[2] = #40000 1'b0;
	DIRB[2] = #100000 1'b1;
	DIRB[2] = #20000 1'b0;
	DIRB[2] = #20000 1'b1;
	DIRB[2] = #20000 1'b0;
	DIRB[2] = #20000 1'b1;
	DIRB[2] = #60000 1'b0;
	DIRB[2] = #20000 1'b1;
	DIRB[2] = #20000 1'b0;
	DIRB[2] = #20000 1'b1;
	DIRB[2] = #40000 1'b0;
	DIRB[2] = #40000 1'b1;
	DIRB[2] = #60000 1'b0;
end 
// DIRB[ 1 ]
initial
begin
	DIRB[1] = 1'b0;
	DIRB[1] = #20000 1'b1;
	DIRB[1] = #40000 1'b0;
	DIRB[1] = #40000 1'b1;
	DIRB[1] = #20000 1'b0;
	DIRB[1] = #20000 1'b1;
	DIRB[1] = #20000 1'b0;
	DIRB[1] = #60000 1'b1;
	DIRB[1] = #20000 1'b0;
	DIRB[1] = #20000 1'b1;
	DIRB[1] = #60000 1'b0;
	DIRB[1] = #40000 1'b1;
	DIRB[1] = #20000 1'b0;
	DIRB[1] = #20000 1'b1;
	DIRB[1] = #80000 1'b0;
	DIRB[1] = #20000 1'b1;
	DIRB[1] = #40000 1'b0;
	DIRB[1] = #40000 1'b1;
	DIRB[1] = #120000 1'b0;
	DIRB[1] = #20000 1'b1;
	DIRB[1] = #40000 1'b0;
	DIRB[1] = #40000 1'b1;
	DIRB[1] = #80000 1'b0;
	DIRB[1] = #40000 1'b1;
end 
// DIRB[ 0 ]
initial
begin
	DIRB[0] = 1'b1;
	DIRB[0] = #20000 1'b0;
	DIRB[0] = #80000 1'b1;
	DIRB[0] = #20000 1'b0;
	DIRB[0] = #20000 1'b1;
	DIRB[0] = #40000 1'b0;
	DIRB[0] = #40000 1'b1;
	DIRB[0] = #100000 1'b0;
	DIRB[0] = #20000 1'b1;
	DIRB[0] = #80000 1'b0;
	DIRB[0] = #20000 1'b1;
	DIRB[0] = #60000 1'b0;
	DIRB[0] = #100000 1'b1;
	DIRB[0] = #20000 1'b0;
	DIRB[0] = #20000 1'b1;
	DIRB[0] = #40000 1'b0;
	DIRB[0] = #60000 1'b1;
	DIRB[0] = #60000 1'b0;
	DIRB[0] = #20000 1'b1;
	DIRB[0] = #20000 1'b0;
	DIRB[0] = #20000 1'b1;
	DIRB[0] = #20000 1'b0;
	DIRB[0] = #20000 1'b1;
	DIRB[0] = #40000 1'b0;
	DIRB[0] = #40000 1'b1;
end 
// DIRI[ 7 ]
initial
begin
	DIRI[7] = 1'b0;
	DIRI[7] = #80000 1'b1;
	DIRI[7] = #20000 1'b0;
	DIRI[7] = #20000 1'b1;
	DIRI[7] = #40000 1'b0;
	DIRI[7] = #20000 1'b1;
	DIRI[7] = #80000 1'b0;
	DIRI[7] = #20000 1'b1;
	DIRI[7] = #20000 1'b0;
	DIRI[7] = #100000 1'b1;
	DIRI[7] = #40000 1'b0;
	DIRI[7] = #40000 1'b1;
	DIRI[7] = #20000 1'b0;
	DIRI[7] = #20000 1'b1;
	DIRI[7] = #60000 1'b0;
	DIRI[7] = #20000 1'b1;
	DIRI[7] = #20000 1'b0;
	DIRI[7] = #20000 1'b1;
	DIRI[7] = #40000 1'b0;
	DIRI[7] = #20000 1'b1;
	DIRI[7] = #20000 1'b0;
	DIRI[7] = #80000 1'b1;
	DIRI[7] = #60000 1'b0;
	DIRI[7] = #20000 1'b1;
	DIRI[7] = #60000 1'b0;
	DIRI[7] = #20000 1'b1;
end 
// DIRI[ 6 ]
initial
begin
	DIRI[6] = 1'b0;
	DIRI[6] = #20000 1'b1;
	DIRI[6] = #20000 1'b0;
	DIRI[6] = #20000 1'b1;
	DIRI[6] = #40000 1'b0;
	DIRI[6] = #40000 1'b1;
	DIRI[6] = #20000 1'b0;
	DIRI[6] = #60000 1'b1;
	DIRI[6] = #80000 1'b0;
	DIRI[6] = #40000 1'b1;
	DIRI[6] = #60000 1'b0;
	DIRI[6] = #20000 1'b1;
	DIRI[6] = #40000 1'b0;
	DIRI[6] = #20000 1'b1;
	DIRI[6] = #20000 1'b0;
	DIRI[6] = #20000 1'b1;
	DIRI[6] = #20000 1'b0;
	DIRI[6] = #40000 1'b1;
	DIRI[6] = #20000 1'b0;
	DIRI[6] = #60000 1'b1;
	DIRI[6] = #20000 1'b0;
	DIRI[6] = #20000 1'b1;
	DIRI[6] = #20000 1'b0;
	DIRI[6] = #20000 1'b1;
	DIRI[6] = #20000 1'b0;
	DIRI[6] = #40000 1'b1;
	DIRI[6] = #20000 1'b0;
	DIRI[6] = #20000 1'b1;
	DIRI[6] = #20000 1'b0;
	DIRI[6] = #20000 1'b1;
	DIRI[6] = #20000 1'b0;
	DIRI[6] = #20000 1'b1;
	DIRI[6] = #20000 1'b0;
	DIRI[6] = #20000 1'b1;
	DIRI[6] = #20000 1'b0;
end 
// DIRI[ 5 ]
initial
begin
	DIRI[5] = 1'b1;
	DIRI[5] = #20000 1'b0;
	DIRI[5] = #20000 1'b1;
	DIRI[5] = #20000 1'b0;
	DIRI[5] = #120000 1'b1;
	DIRI[5] = #20000 1'b0;
	DIRI[5] = #20000 1'b1;
	DIRI[5] = #60000 1'b0;
	DIRI[5] = #20000 1'b1;
	DIRI[5] = #20000 1'b0;
	DIRI[5] = #20000 1'b1;
	DIRI[5] = #20000 1'b0;
	DIRI[5] = #40000 1'b1;
	DIRI[5] = #40000 1'b0;
	DIRI[5] = #20000 1'b1;
	DIRI[5] = #20000 1'b0;
	DIRI[5] = #40000 1'b1;
	DIRI[5] = #40000 1'b0;
	DIRI[5] = #20000 1'b1;
	DIRI[5] = #40000 1'b0;
	DIRI[5] = #20000 1'b1;
	DIRI[5] = #20000 1'b0;
	DIRI[5] = #60000 1'b1;
	DIRI[5] = #40000 1'b0;
	DIRI[5] = #20000 1'b1;
	DIRI[5] = #20000 1'b0;
	DIRI[5] = #20000 1'b1;
	DIRI[5] = #20000 1'b0;
	DIRI[5] = #40000 1'b1;
	DIRI[5] = #80000 1'b0;
	DIRI[5] = #20000 1'b1;
end 
// DIRI[ 4 ]
initial
begin
	DIRI[4] = 1'b0;
	DIRI[4] = #20000 1'b1;
	DIRI[4] = #20000 1'b0;
	DIRI[4] = #20000 1'b1;
	DIRI[4] = #80000 1'b0;
	DIRI[4] = #40000 1'b1;
	DIRI[4] = #20000 1'b0;
	DIRI[4] = #40000 1'b1;
	DIRI[4] = #20000 1'b0;
	DIRI[4] = #40000 1'b1;
	DIRI[4] = #40000 1'b0;
	DIRI[4] = #100000 1'b1;
	DIRI[4] = #40000 1'b0;
	DIRI[4] = #40000 1'b1;
	DIRI[4] = #20000 1'b0;
	DIRI[4] = #20000 1'b1;
	DIRI[4] = #40000 1'b0;
	DIRI[4] = #100000 1'b1;
	DIRI[4] = #20000 1'b0;
	DIRI[4] = #20000 1'b1;
	DIRI[4] = #40000 1'b0;
	DIRI[4] = #20000 1'b1;
	DIRI[4] = #20000 1'b0;
	DIRI[4] = #20000 1'b1;
	DIRI[4] = #20000 1'b0;
	DIRI[4] = #20000 1'b1;
	DIRI[4] = #40000 1'b0;
	DIRI[4] = #20000 1'b1;
	DIRI[4] = #40000 1'b0;
end 
// DIRI[ 3 ]
initial
begin
	DIRI[3] = 1'b0;
	DIRI[3] = #80000 1'b1;
	DIRI[3] = #20000 1'b0;
	DIRI[3] = #20000 1'b1;
	DIRI[3] = #20000 1'b0;
	DIRI[3] = #40000 1'b1;
	DIRI[3] = #200000 1'b0;
	DIRI[3] = #40000 1'b1;
	DIRI[3] = #20000 1'b0;
	DIRI[3] = #100000 1'b1;
	DIRI[3] = #20000 1'b0;
	DIRI[3] = #40000 1'b1;
	DIRI[3] = #20000 1'b0;
	DIRI[3] = #20000 1'b1;
	DIRI[3] = #20000 1'b0;
	DIRI[3] = #60000 1'b1;
	DIRI[3] = #20000 1'b0;
	DIRI[3] = #60000 1'b1;
	DIRI[3] = #60000 1'b0;
	DIRI[3] = #40000 1'b1;
	DIRI[3] = #40000 1'b0;
	DIRI[3] = #20000 1'b1;
	DIRI[3] = #20000 1'b0;
end 
// DIRI[ 2 ]
initial
begin
	DIRI[2] = 1'b0;
	DIRI[2] = #20000 1'b1;
	DIRI[2] = #40000 1'b0;
	DIRI[2] = #40000 1'b1;
	DIRI[2] = #40000 1'b0;
	DIRI[2] = #100000 1'b1;
	DIRI[2] = #100000 1'b0;
	DIRI[2] = #20000 1'b1;
	DIRI[2] = #60000 1'b0;
	DIRI[2] = #20000 1'b1;
	DIRI[2] = #40000 1'b0;
	DIRI[2] = #20000 1'b1;
	DIRI[2] = #20000 1'b0;
	DIRI[2] = #20000 1'b1;
	DIRI[2] = #20000 1'b0;
	DIRI[2] = #40000 1'b1;
	DIRI[2] = #20000 1'b0;
	DIRI[2] = #20000 1'b1;
	DIRI[2] = #20000 1'b0;
	DIRI[2] = #20000 1'b1;
	DIRI[2] = #60000 1'b0;
	DIRI[2] = #20000 1'b1;
	DIRI[2] = #20000 1'b0;
	DIRI[2] = #40000 1'b1;
	DIRI[2] = #160000 1'b0;
end 
// DIRI[ 1 ]
initial
begin
	DIRI[1] = 1'b0;
	DIRI[1] = #20000 1'b1;
	DIRI[1] = #20000 1'b0;
	DIRI[1] = #40000 1'b1;
	DIRI[1] = #40000 1'b0;
	DIRI[1] = #60000 1'b1;
	DIRI[1] = #20000 1'b0;
	DIRI[1] = #40000 1'b1;
	DIRI[1] = #20000 1'b0;
	DIRI[1] = #20000 1'b1;
	DIRI[1] = #60000 1'b0;
	DIRI[1] = #20000 1'b1;
	DIRI[1] = #60000 1'b0;
	DIRI[1] = #20000 1'b1;
	DIRI[1] = #20000 1'b0;
	DIRI[1] = #20000 1'b1;
	DIRI[1] = #60000 1'b0;
	DIRI[1] = #60000 1'b1;
	DIRI[1] = #20000 1'b0;
	DIRI[1] = #60000 1'b1;
	DIRI[1] = #20000 1'b0;
	DIRI[1] = #20000 1'b1;
	DIRI[1] = #80000 1'b0;
	DIRI[1] = #20000 1'b1;
	DIRI[1] = #60000 1'b0;
	DIRI[1] = #20000 1'b1;
	DIRI[1] = #20000 1'b0;
	DIRI[1] = #20000 1'b1;
	DIRI[1] = #20000 1'b0;
end 
// DIRI[ 0 ]
initial
begin
	DIRI[0] = 1'b1;
	DIRI[0] = #20000 1'b0;
	DIRI[0] = #80000 1'b1;
	DIRI[0] = #40000 1'b0;
	DIRI[0] = #20000 1'b1;
	DIRI[0] = #40000 1'b0;
	DIRI[0] = #20000 1'b1;
	DIRI[0] = #20000 1'b0;
	DIRI[0] = #20000 1'b1;
	DIRI[0] = #20000 1'b0;
	DIRI[0] = #60000 1'b1;
	DIRI[0] = #20000 1'b0;
	DIRI[0] = #80000 1'b1;
	DIRI[0] = #20000 1'b0;
	DIRI[0] = #20000 1'b1;
	DIRI[0] = #40000 1'b0;
	DIRI[0] = #40000 1'b1;
	DIRI[0] = #40000 1'b0;
	DIRI[0] = #40000 1'b1;
	DIRI[0] = #20000 1'b0;
	DIRI[0] = #20000 1'b1;
	DIRI[0] = #20000 1'b0;
	DIRI[0] = #40000 1'b1;
	DIRI[0] = #20000 1'b0;
	DIRI[0] = #60000 1'b1;
	DIRI[0] = #60000 1'b0;
	DIRI[0] = #20000 1'b1;
	DIRI[0] = #60000 1'b0;
end 

MycaII_vlg_sample_tst tb_sample (
	.DIRB(DIRB),
	.DIRI(DIRI),
	.ck(ck),
	.opc(opc),
	.x(x),
	.sampler_tx(sampler)
);

MycaII_vlg_check_tst tb_out(
	.PC(PC),
	.clk(clk),
	.sampler_rx(sampler)
);
endmodule

