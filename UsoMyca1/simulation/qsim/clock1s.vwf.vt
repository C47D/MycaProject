// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/02/2014 20:47:59"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    um1b
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module um1b_vlg_sample_tst(
	ck,
	lc,
	ls,
	m,
	sg,
	sl,
	sampler_tx
);
input  ck;
input  lc;
input  ls;
input  m;
input  sg;
input  sl;
output sampler_tx;

reg sample;
time current_time;
always @(ck or lc or ls or m or sg or sl)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module um1b_vlg_check_tst (
	cl,
	clk,
	cn,
	de,
	scp,
	sv,
	sampler_rx
);
input  cl;
input  clk;
input  cn;
input  de;
input [3:0] scp;
input  sv;
input sampler_rx;

reg  cl_expected;
reg  clk_expected;
reg  cn_expected;
reg  de_expected;
reg [3:0] scp_expected;
reg  sv_expected;

reg  cl_prev;
reg  clk_prev;
reg  cn_prev;
reg  de_prev;
reg [3:0] scp_prev;
reg  sv_prev;

reg  clk_expected_prev;

reg  last_clk_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	cl_prev = cl;
	clk_prev = clk;
	cn_prev = cn;
	de_prev = de;
	scp_prev = scp;
	sv_prev = sv;
end

// update expected /o prevs

always @(trigger)
begin
	clk_expected_prev = clk_expected;
end



// expected clk
initial
begin
	clk_expected = 1'bX;
end 
// generate trigger
always @(cl_expected or cl or clk_expected or clk or cn_expected or cn or de_expected or de or scp_expected or scp or sv_expected or sv)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cl = %b | expected clk = %b | expected cn = %b | expected de = %b | expected scp = %b | expected sv = %b | ",cl_expected_prev,clk_expected_prev,cn_expected_prev,de_expected_prev,scp_expected_prev,sv_expected_prev);
	$display("| real cl = %b | real clk = %b | real cn = %b | real de = %b | real scp = %b | real sv = %b | ",cl_prev,clk_prev,cn_prev,de_prev,scp_prev,sv_prev);
`endif
	if (
		( clk_expected_prev !== 1'bx ) && ( clk_prev !== clk_expected_prev )
		&& ((clk_expected_prev !== last_clk_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk_expected_prev);
		$display ("     Real value = %b", clk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_clk_exp = clk_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module um1b_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ck;
reg lc;
reg ls;
reg m;
reg sg;
reg sl;
// wires                                               
wire cl;
wire clk;
wire cn;
wire de;
wire [3:0] scp;
wire sv;

wire sampler;                             

// assign statements (if any)                          
um1b i1 (
// port map - connection between master ports and signals/registers   
	.ck(ck),
	.cl(cl),
	.clk(clk),
	.cn(cn),
	.de(de),
	.lc(lc),
	.ls(ls),
	.m(m),
	.scp(scp),
	.sg(sg),
	.sl(sl),
	.sv(sv)
);

// ck
always
begin
	ck = 1'b0;
	ck = #5000 1'b1;
	#5000;
end 

um1b_vlg_sample_tst tb_sample (
	.ck(ck),
	.lc(lc),
	.ls(ls),
	.m(m),
	.sg(sg),
	.sl(sl),
	.sampler_tx(sampler)
);

um1b_vlg_check_tst tb_out(
	.cl(cl),
	.clk(clk),
	.cn(cn),
	.de(de),
	.scp(scp),
	.sv(sv),
	.sampler_rx(sampler)
);
endmodule

