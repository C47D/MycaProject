// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/04/2014 20:01:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    um1bb
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module um1bb_vlg_vec_tst();
// constants                                           
// general purpose registers
reg LC;
reg LS;
reg M;
reg SG;
reg SL;
reg ck;
// wires                                               
wire CL;
wire CLK;
wire CN;
wire DE;
wire [3:0] SCP;
wire SV;

// assign statements (if any)                          
um1bb i1 (
// port map - connection between master ports and signals/registers   
	.CL(CL),
	.CLK(CLK),
	.CN(CN),
	.DE(DE),
	.LC(LC),
	.LS(LS),
	.M(M),
	.SCP(SCP),
	.SG(SG),
	.SL(SL),
	.SV(SV),
	.ck(ck)
);
initial 
begin 
#1000000 $finish;
end 

// ck
always
begin
	ck = 1'b0;
	ck = #5000 1'b1;
	#5000;
end 
initial 
begin 
#1000000 $finish;
end 
endmodule

