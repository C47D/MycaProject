// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/29/2014 18:08:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    usomycaII
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module usomycaII_vlg_sample_tst(
	LC,
	LS,
	M,
	SE,
	SG,
	SL,
	ck,
	sampler_tx
);
input  LC;
input  LS;
input  M;
input  SE;
input  SG;
input  SL;
input  ck;
output sampler_tx;

reg sample;
time current_time;
always @(LC or LS or M or SE or SG or SL or ck)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module usomycaII_vlg_check_tst (
	CL,
	CN,
	DE,
	SCP,
	SV,
	clk,
	sampler_rx
);
input  CL;
input  CN;
input  DE;
input [7:0] SCP;
input  SV;
input  clk;
input sampler_rx;

reg  CL_expected;
reg  CN_expected;
reg  DE_expected;
reg [7:0] SCP_expected;
reg  SV_expected;
reg  clk_expected;

reg  CL_prev;
reg  CN_prev;
reg  DE_prev;
reg [7:0] SCP_prev;
reg  SV_prev;
reg  clk_prev;

reg  CL_expected_prev;
reg  CN_expected_prev;
reg  DE_expected_prev;
reg [7:0] SCP_expected_prev;
reg  SV_expected_prev;
reg  clk_expected_prev;

reg  last_CL_exp;
reg  last_CN_exp;
reg  last_DE_exp;
reg [7:0] last_SCP_exp;
reg  last_SV_exp;
reg  last_clk_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	CL_prev = CL;
	CN_prev = CN;
	DE_prev = DE;
	SCP_prev = SCP;
	SV_prev = SV;
	clk_prev = clk;
end

// update expected /o prevs

always @(trigger)
begin
	CL_expected_prev = CL_expected;
	CN_expected_prev = CN_expected;
	DE_expected_prev = DE_expected;
	SCP_expected_prev = SCP_expected;
	SV_expected_prev = SV_expected;
	clk_expected_prev = clk_expected;
end



// expected clk
initial
begin
	clk_expected = 1'bX;
end 
// expected SCP[ 7 ]
initial
begin
	SCP_expected[7] = 1'bX;
	SCP_expected[7] = #999000 1'b0;
end 
// expected SCP[ 6 ]
initial
begin
	SCP_expected[6] = 1'bX;
	SCP_expected[6] = #999000 1'b0;
end 
// expected SCP[ 5 ]
initial
begin
	SCP_expected[5] = 1'bX;
	SCP_expected[5] = #999000 1'b0;
end 
// expected SCP[ 4 ]
initial
begin
	SCP_expected[4] = 1'bX;
	SCP_expected[4] = #999000 1'b0;
end 
// expected SCP[ 3 ]
initial
begin
	SCP_expected[3] = 1'bX;
	SCP_expected[3] = #999000 1'b0;
end 
// expected SCP[ 2 ]
initial
begin
	SCP_expected[2] = 1'bX;
	SCP_expected[2] = #999000 1'b0;
end 
// expected SCP[ 1 ]
initial
begin
	SCP_expected[1] = 1'bX;
	SCP_expected[1] = #999000 1'b0;
end 
// expected SCP[ 0 ]
initial
begin
	SCP_expected[0] = 1'bX;
	SCP_expected[0] = #999000 1'b0;
end 

// expected SV
initial
begin
	SV_expected = 1'bX;
	SV_expected = #999000 1'b0;
end 

// expected CL
initial
begin
	CL_expected = 1'bX;
	CL_expected = #999000 1'b0;
end 

// expected CN
initial
begin
	CN_expected = 1'bX;
	CN_expected = #999000 1'b0;
end 

// expected DE
initial
begin
	DE_expected = 1'bX;
	DE_expected = #999000 1'b0;
end 
// generate trigger
always @(CL_expected or CL or CN_expected or CN or DE_expected or DE or SCP_expected or SCP or SV_expected or SV or clk_expected or clk)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CL = %b | expected CN = %b | expected DE = %b | expected SCP = %b | expected SV = %b | expected clk = %b | ",CL_expected_prev,CN_expected_prev,DE_expected_prev,SCP_expected_prev,SV_expected_prev,clk_expected_prev);
	$display("| real CL = %b | real CN = %b | real DE = %b | real SCP = %b | real SV = %b | real clk = %b | ",CL_prev,CN_prev,DE_prev,SCP_prev,SV_prev,clk_prev);
`endif
	if (
		( CL_expected_prev !== 1'bx ) && ( CL_prev !== CL_expected_prev )
		&& ((CL_expected_prev !== last_CL_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CL_expected_prev);
		$display ("     Real value = %b", CL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CL_exp = CL_expected_prev;
	end
	if (
		( CN_expected_prev !== 1'bx ) && ( CN_prev !== CN_expected_prev )
		&& ((CN_expected_prev !== last_CN_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CN_expected_prev);
		$display ("     Real value = %b", CN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CN_exp = CN_expected_prev;
	end
	if (
		( DE_expected_prev !== 1'bx ) && ( DE_prev !== DE_expected_prev )
		&& ((DE_expected_prev !== last_DE_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DE_expected_prev);
		$display ("     Real value = %b", DE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DE_exp = DE_expected_prev;
	end
	if (
		( SCP_expected_prev[0] !== 1'bx ) && ( SCP_prev[0] !== SCP_expected_prev[0] )
		&& ((SCP_expected_prev[0] !== last_SCP_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SCP[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SCP_expected_prev);
		$display ("     Real value = %b", SCP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SCP_exp[0] = SCP_expected_prev[0];
	end
	if (
		( SCP_expected_prev[1] !== 1'bx ) && ( SCP_prev[1] !== SCP_expected_prev[1] )
		&& ((SCP_expected_prev[1] !== last_SCP_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SCP[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SCP_expected_prev);
		$display ("     Real value = %b", SCP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SCP_exp[1] = SCP_expected_prev[1];
	end
	if (
		( SCP_expected_prev[2] !== 1'bx ) && ( SCP_prev[2] !== SCP_expected_prev[2] )
		&& ((SCP_expected_prev[2] !== last_SCP_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SCP[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SCP_expected_prev);
		$display ("     Real value = %b", SCP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SCP_exp[2] = SCP_expected_prev[2];
	end
	if (
		( SCP_expected_prev[3] !== 1'bx ) && ( SCP_prev[3] !== SCP_expected_prev[3] )
		&& ((SCP_expected_prev[3] !== last_SCP_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SCP[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SCP_expected_prev);
		$display ("     Real value = %b", SCP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SCP_exp[3] = SCP_expected_prev[3];
	end
	if (
		( SCP_expected_prev[4] !== 1'bx ) && ( SCP_prev[4] !== SCP_expected_prev[4] )
		&& ((SCP_expected_prev[4] !== last_SCP_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SCP[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SCP_expected_prev);
		$display ("     Real value = %b", SCP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SCP_exp[4] = SCP_expected_prev[4];
	end
	if (
		( SCP_expected_prev[5] !== 1'bx ) && ( SCP_prev[5] !== SCP_expected_prev[5] )
		&& ((SCP_expected_prev[5] !== last_SCP_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SCP[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SCP_expected_prev);
		$display ("     Real value = %b", SCP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SCP_exp[5] = SCP_expected_prev[5];
	end
	if (
		( SCP_expected_prev[6] !== 1'bx ) && ( SCP_prev[6] !== SCP_expected_prev[6] )
		&& ((SCP_expected_prev[6] !== last_SCP_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SCP[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SCP_expected_prev);
		$display ("     Real value = %b", SCP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SCP_exp[6] = SCP_expected_prev[6];
	end
	if (
		( SCP_expected_prev[7] !== 1'bx ) && ( SCP_prev[7] !== SCP_expected_prev[7] )
		&& ((SCP_expected_prev[7] !== last_SCP_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SCP[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SCP_expected_prev);
		$display ("     Real value = %b", SCP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SCP_exp[7] = SCP_expected_prev[7];
	end
	if (
		( SV_expected_prev !== 1'bx ) && ( SV_prev !== SV_expected_prev )
		&& ((SV_expected_prev !== last_SV_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SV :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SV_expected_prev);
		$display ("     Real value = %b", SV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SV_exp = SV_expected_prev;
	end
	if (
		( clk_expected_prev !== 1'bx ) && ( clk_prev !== clk_expected_prev )
		&& ((clk_expected_prev !== last_clk_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk_expected_prev);
		$display ("     Real value = %b", clk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_clk_exp = clk_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#2000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module usomycaII_vlg_vec_tst();
// constants                                           
// general purpose registers
reg LC;
reg LS;
reg M;
reg SE;
reg SG;
reg SL;
reg ck;
// wires                                               
wire CL;
wire CN;
wire DE;
wire [7:0] SCP;
wire SV;
wire clk;

wire sampler;                             

// assign statements (if any)                          
usomycaII i1 (
// port map - connection between master ports and signals/registers   
	.CL(CL),
	.CN(CN),
	.DE(DE),
	.LC(LC),
	.LS(LS),
	.M(M),
	.SCP(SCP),
	.SE(SE),
	.SG(SG),
	.SL(SL),
	.SV(SV),
	.ck(ck),
	.clk(clk)
);

// ck
always
begin
	ck = 1'b0;
	ck = #5000 1'b1;
	#5000;
end 

// M
initial
begin
	M = 1'b1;
	M = #64000 1'b0;
	M = #176000 1'b1;
	M = #64000 1'b0;
end 

// SL
initial
begin
	SL = 1'b0;
	SL = #160000 1'b1;
	SL = #32000 1'b0;
end 

// SG
initial
begin
	SG = 1'b0;
	SG = #320000 1'b1;
	SG = #192000 1'b0;
end 

// LS
initial
begin
	LS = 1'b0;
	LS = #464000 1'b1;
	LS = #192000 1'b0;
	LS = #112000 1'b1;
	LS = #208000 1'b0;
end 

// LC
initial
begin
	LC = 1'b0;
	LC = #528000 1'b1;
	LC = #144000 1'b0;
end 

// SE
initial
begin
	SE = 1'b0;
	SE = #640000 1'b1;
	SE = #208000 1'b0;
end 

usomycaII_vlg_sample_tst tb_sample (
	.LC(LC),
	.LS(LS),
	.M(M),
	.SE(SE),
	.SG(SG),
	.SL(SL),
	.ck(ck),
	.sampler_tx(sampler)
);

usomycaII_vlg_check_tst tb_out(
	.CL(CL),
	.CN(CN),
	.DE(DE),
	.SCP(SCP),
	.SV(SV),
	.clk(clk),
	.sampler_rx(sampler)
);
endmodule

