// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/04/2014 20:07:14"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    myca1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module myca1_vlg_sample_tst(
	ck,
	dir,
	opc,
	x,
	sampler_tx
);
input  ck;
input [3:0] dir;
input [2:0] opc;
input  x;
output sampler_tx;

reg sample;
time current_time;
always @(ck or dir or opc or x)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module myca1_vlg_check_tst (
	pc,
	sampler_rx
);
input [3:0] pc;
input sampler_rx;

reg [3:0] pc_expected;

reg [3:0] pc_prev;

reg [3:0] pc_expected_prev;

reg [3:0] last_pc_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	pc_prev = pc;
end

// update expected /o prevs

always @(trigger)
begin
	pc_expected_prev = pc_expected;
end


// expected pc[ 3 ]
initial
begin
	pc_expected[3] = 1'bX;
end 
// expected pc[ 2 ]
initial
begin
	pc_expected[2] = 1'bX;
end 
// expected pc[ 1 ]
initial
begin
	pc_expected[1] = 1'bX;
end 
// expected pc[ 0 ]
initial
begin
	pc_expected[0] = 1'bX;
end 
// generate trigger
always @(pc_expected or pc)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected pc = %b | ",pc_expected_prev);
	$display("| real pc = %b | ",pc_prev);
`endif
	if (
		( pc_expected_prev[0] !== 1'bx ) && ( pc_prev[0] !== pc_expected_prev[0] )
		&& ((pc_expected_prev[0] !== last_pc_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pc_exp[0] = pc_expected_prev[0];
	end
	if (
		( pc_expected_prev[1] !== 1'bx ) && ( pc_prev[1] !== pc_expected_prev[1] )
		&& ((pc_expected_prev[1] !== last_pc_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pc_exp[1] = pc_expected_prev[1];
	end
	if (
		( pc_expected_prev[2] !== 1'bx ) && ( pc_prev[2] !== pc_expected_prev[2] )
		&& ((pc_expected_prev[2] !== last_pc_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pc_exp[2] = pc_expected_prev[2];
	end
	if (
		( pc_expected_prev[3] !== 1'bx ) && ( pc_prev[3] !== pc_expected_prev[3] )
		&& ((pc_expected_prev[3] !== last_pc_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pc_exp[3] = pc_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module myca1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ck;
reg [3:0] dir;
reg [2:0] opc;
reg x;
// wires                                               
wire [3:0] pc;

wire sampler;                             

// assign statements (if any)                          
myca1 i1 (
// port map - connection between master ports and signals/registers   
	.ck(ck),
	.dir(dir),
	.opc(opc),
	.pc(pc),
	.x(x)
);

// ck
initial
begin
	repeat(142)
	begin
		ck = 1'b0;
		ck = #3500 1'b1;
		# 3500;
	end
	ck = 1'b0;
	ck = #3500 1'b1;
end 
// opc[ 2 ]
initial
begin
	repeat(2)
	begin
		opc[2] = 1'b0;
		opc[2] = #240000 1'b1;
		# 240000;
	end
	opc[2] = 1'b0;
end 
// opc[ 1 ]
initial
begin
	repeat(4)
	begin
		opc[1] = 1'b0;
		opc[1] = #120000 1'b1;
		# 120000;
	end
	opc[1] = 1'b0;
end 
// opc[ 0 ]
initial
begin
	repeat(8)
	begin
		opc[0] = 1'b0;
		opc[0] = #60000 1'b1;
		# 60000;
	end
	opc[0] = 1'b0;
end 

// x
initial
begin
	repeat(16)
	begin
		x = 1'b0;
		x = #30000 1'b1;
		# 30000;
	end
	x = 1'b0;
	x = #30000 1'b1;
end 
// dir[ 3 ]
initial
begin
	dir[3] = 1'b1;
end 
// dir[ 2 ]
initial
begin
	dir[2] = 1'b1;
end 
// dir[ 1 ]
initial
begin
	dir[1] = 1'b1;
end 
// dir[ 0 ]
initial
begin
	dir[0] = 1'b1;
end 

myca1_vlg_sample_tst tb_sample (
	.ck(ck),
	.dir(dir),
	.opc(opc),
	.x(x),
	.sampler_tx(sampler)
);

myca1_vlg_check_tst tb_out(
	.pc(pc),
	.sampler_rx(sampler)
);
endmodule

